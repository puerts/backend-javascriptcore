diff --git a/Source/JavaScriptCore/yarr/generateYarrCanonicalizeUnicode b/Source/JavaScriptCore/yarr/generateYarrCanonicalizeUnicode
index 290fda4e309d..cc88e095a4f5 100644
--- a/Source/JavaScriptCore/yarr/generateYarrCanonicalizeUnicode
+++ b/Source/JavaScriptCore/yarr/generateYarrCanonicalizeUnicode
@@ -163,15 +163,15 @@ class Canonicalize:
 
         file.write("\n")
         file.write("constexpr size_t UNICODE_CANONICALIZATION_SETS = {setCount:d};\n".format(setCount=len(characterSets)))
-        file.write("constexpr const char32_t* unicodeCharacterSetInfo[UNICODE_CANONICALIZATION_SETS] = {\n")
+        file.write("const char32_t* const unicodeCharacterSetInfo[UNICODE_CANONICALIZATION_SETS] = {\n")
 
         for i in range(len(characterSets)):
             file.write("    unicodeCharacterSet{setNumber:d},\n".format(setNumber=i))
 
         file.write("};\n")
         file.write("\n")
-        file.write("constexpr size_t UNICODE_CANONICALIZATION_RANGES = {rangeCount:d};\n".format(rangeCount=len(rangeInfo)))
-        file.write("constexpr CanonicalizationRange unicodeRangeInfo[UNICODE_CANONICALIZATION_RANGES] = {\n")
+        file.write("const size_t UNICODE_CANONICALIZATION_RANGES = {rangeCount:d};\n".format(rangeCount=len(rangeInfo)))
+        file.write("const CanonicalizationRange unicodeRangeInfo[UNICODE_CANONICALIZATION_RANGES] = {\n")
 
         for info in rangeInfo:
             typeAndValue = info["type"].split(":")
diff --git a/Source/WTF/wtf/dragonbox/dragonbox.h b/Source/WTF/wtf/dragonbox/dragonbox.h
index 6f13a96d0c4b..e43309d964a1 100644
--- a/Source/WTF/wtf/dragonbox/dragonbox.h
+++ b/Source/WTF/wtf/dragonbox/dragonbox.h
@@ -99,7 +99,7 @@ struct impl : private FloatTraits, private FloatTraits::format {
         bool parity;
         bool is_integer;
     };
-    template<class FloatFormat, class Dummy = void>
+    template<class FloatFormat>
     struct compute_mul_impl;
 
     //// The main algorithm assumes the input is a normal/subnormal finite number
@@ -486,8 +486,8 @@ struct impl : private FloatTraits, private FloatTraits::format {
         }
     }
 
-    template<class Dummy>
-    struct compute_mul_impl<ieee754_binary32, Dummy> {
+    template<>
+    struct compute_mul_impl<ieee754_binary32> {
         static constexpr compute_mul_result compute_mul(carrier_uint u, cache_entry_type const& cache) noexcept
         {
             auto r = wuint::umul96_upper64(u, cache);
@@ -527,8 +527,8 @@ struct impl : private FloatTraits, private FloatTraits::format {
         }
     };
 
-    template<class Dummy>
-    struct compute_mul_impl<ieee754_binary64, Dummy> {
+    template<>
+    struct compute_mul_impl<ieee754_binary64> {
         static constexpr compute_mul_result compute_mul(carrier_uint u, cache_entry_type const& cache) noexcept
         {
             auto r = wuint::umul192_upper128(u, cache);
